{"version":3,"sources":["logo.svg","Components/SingleList.js","Components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SingleList","props","useState","line","setLine","className","onClick","style","textDecoration","key","index","val","HomePage","item","setItem","newItem","setNewItem","placeholder","value","onChange","event","target","oldData","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,2JCuB5BC,MAnBf,SAAoBC,GAAQ,IAAD,EAECC,oBAAS,GAFV,mBAEhBC,EAFgB,KAEVC,EAFU,KAQvB,OACI,yBAAKC,UAAU,WACf,0BAAMC,QANI,WACVF,GAAQ,KAMJ,kBAAC,IAAD,CAAYC,UAAU,SAE9B,wBAAIE,MAAO,CAACC,eAAgBL,EAAO,eAAiB,QAASM,IAAKR,EAAMS,OAAQT,EAAMU,OCqC3EC,MAjDf,WAAqB,IAAD,EAEQV,qBAFR,mBAETW,EAFS,KAEHC,EAFG,OAIcZ,mBAAS,IAJvB,mBAITa,EAJS,KAIAC,EAJA,KAoBhB,OACI,6BACI,yBAAKX,UAAU,YACX,yBAAKA,UAAU,cAEX,6BACA,yCACA,6BAEA,2BAAOY,YAAY,gBAAgBC,MAAOL,EAAMM,SAvB9C,SAACC,GACdN,EAAQM,EAAMC,OAAOH,UAuBV,4BAAQb,UAAU,UAAUC,QApB1B,WACdU,GAAW,SAACM,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAoBT,OAGxBC,EAAQ,MAeI,KAEA,6BACA,4BAEQC,EAAQQ,KAAI,SAACZ,EAAKD,GACd,OACG,kBAAC,EAAD,CAAYA,MAAOA,EAAOC,IAAKA,YC7BnDa,MARf,WACE,OACE,yBAAKnB,UAAU,OACd,kBAAC,EAAD,QCIeoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7006fe6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport '../CssFolder/homepage.css'\r\n\r\nfunction SingleList(props) {\r\n\r\n    const [line, setLine] = useState(false);\r\n\r\n    const cutIt = ()=>{\r\n        setLine(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo_li\">\r\n        <span onClick={cutIt}>\r\n            <DeleteIcon className=\"del\"/>\r\n            </span>\r\n    <li style={{textDecoration: line ? \"line-through\" : \"none\"}} key={props.index}>{props.val}</li>\r\n    \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SingleList\r\n","import React, { useState } from 'react'\r\nimport '../CssFolder/homepage.css'\r\n\r\nimport SingleList from './SingleList';\r\n\r\nfunction HomePage() {\r\n\r\n    const [item, setItem] = useState();\r\n   \r\n    const [newItem, setNewItem] = useState([]);\r\n\r\n    const itemEvent = (event) =>{\r\n         setItem(event.target.value);\r\n    }\r\n\r\n    const addToList = () =>{\r\n        setNewItem((oldData)=>{\r\n            return [...oldData, item]\r\n        })\r\n\r\n        setItem(\"\");\r\n    }\r\n    \r\n  \r\n\r\n    return (\r\n        <div>\r\n            <div className=\"main_div\">\r\n                <div className=\"center_div\">\r\n\r\n                    <br/>\r\n                    <h2>ToDo List</h2>\r\n                    <br/>\r\n\r\n                    <input placeholder=\"Add your item\" value={item} onChange={itemEvent}/>\r\n                    <button className=\"plusBtn\" onClick={addToList}>+</button>\r\n\r\n                    <br/>\r\n                    <ol>\r\n                        {\r\n                            newItem.map((val, index)=>{\r\n                                return (\r\n                                   <SingleList index={index} val={val}/>\r\n                                )\r\n                            })\r\n}\r\n                    </ol>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomePage from './Components/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <HomePage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}